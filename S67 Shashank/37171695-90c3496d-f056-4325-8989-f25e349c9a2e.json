{
	"info": {
		"_postman_id": "37171695-90c3496d-f056-4325-8989-f25e349c9a2e",
		"name": "S67-Shashank",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Industry",
			"item": [
				{
					"name": "industry- Valid Data -\"value\": \"51\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-fea9dcf8-adca-4580-a374-b990b347a62e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"51\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry-  Wrong Data -\"value\": \"51*a\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-5288ba99-ff85-4d29-affd-84835d13a5fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"51*a\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- No Data -\"value\": \"\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-2a9c8d83-ed4c-4923-ba24-2a132d702bcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- industry name -\"value\": \"art\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-040dc3b8-0611-4911-b33b-d25963d22e29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"value\": \"art\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- Exclude Valid Data -\"value\": \"51\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-3ead2563-1a5f-472b-94cb-0394b7a5707c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// not working",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry- value is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-a3cb2ece-4278-49e8-a1e1-74eaec574bb9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    // value is missing\r\n  },\r\n  \"pagination\": {\r\n    \"page_size\": 50,\r\n    \"page_no\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry - Missing \"data\" object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-a620e9d2-ef54-4b04-a1e4-4faaa6127743",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"pagination\": {\r\n    \"page_size\": 50,\r\n    \"page_no\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				},
				{
					"name": "industry - Invalid \"value\" input",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e0f65da-72fe-4334-8f5c-bf3d397bbad8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid structure\", function () {\r",
									"    pm.expect(response).to.have.property('status');\r",
									"    pm.expect(response).to.have.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Status object contains expected properties\", function () {\r",
									"    pm.expect(response.status).to.have.property('statusCode');\r",
									"    pm.expect(response.status).to.have.property('requestId');\r",
									"    pm.expect(response.status).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    pm.expect(response.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"id": "37171695-726bae71-80a5-4297-bb64-685986fd0b07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"data\": {\r\n    \"value\": \"a\".repeat(1000)\r\n  },\r\n  \"pagination\": {\r\n    \"page_size\": 50,\r\n    \"page_no\": 1\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_Url}}filter/v1/industry",
							"host": [
								"{{base_Url}}filter"
							],
							"path": [
								"v1",
								"industry"
							]
						}
					},
					"response": []
				}
			],
			"id": "37171695-312dd44b-a97a-469a-a81a-e2533b59e08b"
		},
		{
			"name": "Parent Company Filter",
			"item": [
				{
					"name": "Get All Parent Company",
					"item": [
						{
							"name": "Get All Parent Company- valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab5e14cb-a5b0-4849-bcd2-cb19b539d361",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-1dcad877-e9cb-4311-8317-2ff79a260645",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 10,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Parent Company- Invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2232467-caad-4691-b5d2-c114dd007bbe",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-299bc0b1-70fa-458f-bd67-aac4072186d6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"value\": \"a.repeat(1000)\"\r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Parent Company- value is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "267477fe-c232-42b3-9efa-1decd758aef6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-0092598d-cc84-4630-b1cc-cc143ae6ca46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \r\n    },\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Parent Company- Missing \"data\" object",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddc0b2d0-77f4-45d2-ae72-36aea3192046",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a valid structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"status\");\r",
											"    pm.expect(jsonData.status.statusCode).to.equal(200);\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Each item contains required fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"        pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"        pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"        pm.expect(item).to.have.property(\"account_details\");\r",
											"        pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-b2ad6c83-bac7-4e4a-a7eb-4d7dfdf93537",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pagination\": {\r\n        \"page_size\": 50,\r\n        \"page_no\": 1\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/generic/company",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"generic",
										"company"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-e3657902-58e8-450e-867a-6310ff3b9937"
				},
				{
					"name": "Advanced Search(Parent Company Filter)",
					"item": [
						{
							"name": "Advanced Search(Parent Company Filter) Valid data INCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-d6772895-6bbf-4019-9aa9-326943757045",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Valid data Multi",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-643376a2-6b89-4108-a5a9-9addeac9aeeb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"53A15A01E32C8428\",\r\n                    \"rc_comp_name_drv\": \"Amazon\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C560BAQHTvZwCx4p2Qg/company-logo_200_200/company-logo_200_200/0/1630640869849/amazon_logo?e=2147483647&v=beta&t=a5B7I1UaO0ruEdmvO_Ojbq4HW61CWsJk535_kW66RfU\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"amazon.com\",\r\n                    \"name\": \"Amazon\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"C5C7C0D7F97E3DD1\",\r\n                    \"rc_comp_name_drv\": \"Microsoft\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/D560BAQH32RJQCl3dDQ/company-logo_200_200/B56ZYQ0mrGGoAM-/0/1744038948046/microsoft_logo?e=2147483647&v=beta&t=ts9MGrTk7Lz3R1bmAfzCL8euuuuPWPCoXfdiLA2_IzM\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"microsoft.com\",\r\n                    \"name\": \"Microsoft\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Valid data EXCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-41a811ca-96fd-45ff-8e72-53e0080148d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"EXCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Invalid data (GUID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-3e386cc5-ce7a-4bf3-ae39-48aa43281ab0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"@!!##@\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 50\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Missing Filter Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-21e7886b-bdd9-4c39-b94b-8ae1551a7023",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                  \r\n                    \r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search(Parent Company Filter) Invalid type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-bdf64d88-cc03-44b0-99e3-8b1d06ad83cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"EXCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Valid data INCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-30882bf1-cc05-4c40-9c0b-15cca800a4c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Valid data EXCLUDE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-e29a5633-3ad9-4fc1-9b47-6fa474979b6e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"EXCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Invalid data (GUID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-40cec736-c47a-4b8a-9764-df865fcaee7d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"47656*\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \" google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Lead(Parent Company Filter) Missing Filter Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a09ee5d5-bf00-4cd1-a0e4-2ca4ac9923ae",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-b23de159-f224-4520-8ebb-2e741883b293",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                  \r\n                    \r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-a371e7d5-d5c0-46f9-b790-a5d583c56110"
				},
				{
					"name": "Advanced Search Count(Parent Company Filter)",
					"item": [
						{
							"name": "Advanced Search Count(Parent Company Filter) - Lead",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('data');\r",
											"});\r",
											"\r",
											"// Test for status property structure\r",
											"pm.test(\"Status property has message, requestId, and statusCode\", function () {\r",
											"    pm.expect(response.status).to.have.property('message');\r",
											"    pm.expect(response.status).to.have.property('requestId');\r",
											"    pm.expect(response.status).to.have.property('statusCode');\r",
											"});\r",
											"\r",
											"// Test for data property structure\r",
											"pm.test(\"Data property has company_count and contact_count\", function () {\r",
											"    pm.expect(response.data).to.have.property('company_count');\r",
											"    pm.expect(response.data).to.have.property('contact_count');\r",
											"});\r",
											"\r",
											"// Test for content-type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-75a10389-63db-4591-b00c-f1957ccec0cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Parent Company Filter) - Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('data');\r",
											"});\r",
											"\r",
											"// Test for status property structure\r",
											"pm.test(\"Status property has message, requestId, and statusCode\", function () {\r",
											"    pm.expect(response.status).to.have.property('message');\r",
											"    pm.expect(response.status).to.have.property('requestId');\r",
											"    pm.expect(response.status).to.have.property('statusCode');\r",
											"});\r",
											"\r",
											"// Test for data property structure\r",
											"pm.test(\"Data property has company_count and contact_count\", function () {\r",
											"    pm.expect(response.data).to.have.property('company_count');\r",
											"    pm.expect(response.data).to.have.property('contact_count');\r",
											"});\r",
											"\r",
											"// Test for content-type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-e1d40c10-9bd2-4447-b009-c93ad8ad6e9d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Parent Company Filter) - Lead Multi",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-8d470a54-26a8-43d3-854c-ef5a9721116c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"53A15A01E32C8428\",\r\n                    \"rc_comp_name_drv\": \"Amazon\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C560BAQHTvZwCx4p2Qg/company-logo_200_200/company-logo_200_200/0/1630640869849/amazon_logo?e=2147483647&v=beta&t=a5B7I1UaO0ruEdmvO_Ojbq4HW61CWsJk535_kW66RfU\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"amazon.com\",\r\n                    \"name\": \"Amazon\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"C5C7C0D7F97E3DD1\",\r\n                    \"rc_comp_name_drv\": \"Microsoft\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/D560BAQH32RJQCl3dDQ/company-logo_200_200/B56ZYQ0mrGGoAM-/0/1744038948046/microsoft_logo?e=2147483647&v=beta&t=ts9MGrTk7Lz3R1bmAfzCL8euuuuPWPCoXfdiLA2_IzM\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"microsoft.com\",\r\n                    \"name\": \"Microsoft\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Parent Company Filter) - Account Multi",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-5b413e31-9e49-4369-93b4-b76c1cb5da97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"parentCompany\": [\r\n                {\r\n                    \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                    \"rc_comp_name_drv\": \"Google\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                    \"name\": \"Google\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"53A15A01E32C8428\",\r\n                    \"rc_comp_name_drv\": \"Amazon\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C560BAQHTvZwCx4p2Qg/company-logo_200_200/company-logo_200_200/0/1630640869849/amazon_logo?e=2147483647&v=beta&t=a5B7I1UaO0ruEdmvO_Ojbq4HW61CWsJk535_kW66RfU\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"amazon.com\",\r\n                    \"name\": \"Amazon\",\r\n                    \"type\": \"INCLUDE\"\r\n                },\r\n                {\r\n                    \"pc_comp_guid\": \"C5C7C0D7F97E3DD1\",\r\n                    \"rc_comp_name_drv\": \"Microsoft\",\r\n                    \"account_details\": {\r\n                        \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/D560BAQH32RJQCl3dDQ/company-logo_200_200/B56ZYQ0mrGGoAM-/0/1744038948046/microsoft_logo?e=2147483647&v=beta&t=ts9MGrTk7Lz3R1bmAfzCL8euuuuPWPCoXfdiLA2_IzM\"\r\n                    },\r\n                    \"ln_comp_url_cleaned_drv\": \"microsoft.com\",\r\n                    \"name\": \"Microsoft\",\r\n                    \"type\": \"INCLUDE\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-b0237109-f0cb-43fa-a000-589197245a89"
				},
				{
					"name": "Saved Search Account(Parent Company Filter)",
					"item": [
						{
							"name": "Saved Search Account(Parent Company Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-6859f0b6-47be-457d-b945-229778704dd0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sa1s\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-382a5e87-eaac-4a70-8123-5c8085e4e8f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"filterJson\": {\r\n      \"company_info\": {\r\n        \"parentCompany\": [\r\n          {\r\n            \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n            \"rc_comp_name_drv\": \"Google\",\r\n            \"account_details\": {\r\n              \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n            },\r\n            \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n            \"name\": \"Google\",\r\n            \"type\": \"INCLUDE\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-6da40642-ca9e-4bdf-b7e1-d5d913d0f41c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-b3cd7eb8-1e1c-4fe6-b9d1-623187aebe82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 93,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-f1050437-3b8d-4568-851a-68a78a8c8ab8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Parent Company Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-d04b8281-6bb3-46f1-8c40-fdbb80d6a1ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 93,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-60372e2b-a273-4778-9ced-a4faa45dd7ea"
				},
				{
					"name": "Saved Search Lead(Parent Company Filter) Copy",
					"item": [
						{
							"name": "Saved Search Lead(Parent Company Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-fb674856-0423-4083-932f-b2ff66a15a62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Parent Company Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-7b55514c-57aa-421a-9d26-f1b9e9f3ba69",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"filterJson\": {\r\n      \"company_info\": {\r\n        \"parentCompany\": [\r\n          {\r\n            \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n            \"rc_comp_name_drv\": \"Google\",\r\n            \"account_details\": {\r\n              \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n            },\r\n            \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n            \"name\": \"Google\",\r\n            \"type\": \"INCLUDE\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead(Parent Company Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-db690868-5f91-4c1e-bd34-28c574b91276",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Parent Company Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-ef5097d4-f12c-489b-93ea-3c6c41a71ac0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 115,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead(Parent Company Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-9c3bc742-d386-4282-b3cc-7ea2d879a73d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"parentCompany\": [\r\n                    {\r\n                        \"pc_comp_guid\": \"195E756C4C6F25C1\",\r\n                        \"rc_comp_name_drv\": \"Google\",\r\n                        \"account_details\": {\r\n                            \"ln_comp_logo_url\": \"https://media.licdn.com/dms/image/v2/C4D0BAQHiNSL4Or29cg/company-logo_200_200/company-logo_200_200/0/1631311446380?e=2147483647&v=beta&t=fnMgfquTmN5LLPDz_pQ3ABlHsrgISwU9CQS35ol7QpE\"\r\n                        },\r\n                        \"ln_comp_url_cleaned_drv\": \"google.com\",\r\n                        \"name\": \"Google\",\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Parent Company Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Validate response time is less than 200ms\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Check Content-Type header\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Validate response structure\r",
											"const response = pm.response.json();\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\");\r",
											"});\r",
											"\r",
											"// Validate status object structure\r",
											"pm.test(\"Status object has correct properties\", function () {\r",
											"    const status = response.status;\r",
											"    pm.expect(status).to.have.property(\"statusCode\");\r",
											"    pm.expect(status).to.have.property(\"requestId\");\r",
											"    pm.expect(status).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"// Validate data object structure\r",
											"pm.test(\"Data object has searchId property\", function () {\r",
											"    const data = response.data;\r",
											"    pm.expect(data).to.have.property(\"searchId\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-b6a7f952-4463-4890-b3dc-cc40697ee405",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 115,\r\n        \"name\": \"sas\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-563d4910-8441-4403-8167-1bc97fcd1cf4"
				}
			],
			"id": "37171695-f9a5e7a0-bc53-4f5c-a220-53b0b246fa74"
		},
		{
			"name": "Global Revenue Filter",
			"item": [
				{
					"name": "Advanced Search (Global Revenue Filter)",
					"item": [
						{
							"name": "Advanced Search (Global Revenue Filter) - Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c408aaa-32a8-40a7-a2ee-c8e7670f1eca",
										"exec": [
											"// Check if the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Parse the response body\r",
											"const response = pm.response.json();\r",
											"\r",
											"// Validate the response structure\r",
											"pm.test(\"Response has status and data properties\", function () {\r",
											"    pm.expect(response).to.have.property('status');\r",
											"    pm.expect(response).to.have.property('data');\r",
											"});\r",
											"\r",
											"// Validate the status structure\r",
											"pm.test(\"Status structure is valid\", function () {\r",
											"    pm.expect(response.status).to.have.property('message').that.is.a('string');\r",
											"    pm.expect(response.status).to.have.property('requestId').that.is.a('string');\r",
											"    pm.expect(response.status).to.have.property('statusCode').that.equals(200);\r",
											"});\r",
											"\r",
											"// Validate the data array structure\r",
											"pm.test(\"Data is an array and has at least one item\", function () {\r",
											"    pm.expect(response.data).to.be.an('array').that.is.not.empty;\r",
											"    response.data.forEach(item => {\r",
											"        pm.expect(item).to.have.property('pc_con_guid').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('ln_con_full_name').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('rc_work_loc_country').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('ln_con_job_title_en').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('leads_details').that.is.an('object');\r",
											"        pm.expect(item).to.have.property('accounts_filter').that.is.an('object');\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate leads_details structure\r",
											"response.data.forEach(item => {\r",
											"    pm.test(\"Leads details structure is valid\", function () {\r",
											"        pm.expect(item.leads_details).to.have.property('ln_con_picture_url').that.is.a('string');\r",
											"        pm.expect(item.leads_details).to.have.property('ln_con_pub_profile_url').that.is.a('string');\r",
											"        pm.expect(item.leads_details).to.have.property('pc_con_direct_dial_avbl').that.is.a('number');\r",
											"        pm.expect(item.leads_details).to.have.property('pc_con_email_avbl').that.is.a('number');\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate accounts_filter structure\r",
											"response.data.forEach(item => {\r",
											"    pm.test(\"Accounts filter structure is valid\", function () {\r",
											"        pm.expect(item.accounts_filter).to.have.property('pc_comp_guid').that.is.a('string');\r",
											"        pm.expect(item.accounts_filter).to.have.property('rc_comp_name_drv').that.is.a('string');\r",
											"        pm.expect(item.accounts_filter).to.have.property('account_details').that.is.an('object');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-1a3e2e8a-6e68-4654-8e3b-a6f9bc076890",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalHeadCount\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"100 to 10,000 \",\r\n                        \"min\": 100,\r\n                        \"max\": 10000,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": [
								{
									"id": "37171695-c333441e-0d76-4a8c-a829-5d02447fd7da",
									"name": "Untitled Response",
									"originalRequest": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{auth_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalHeadCount\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"100 to 10,000 \",\r\n                        \"min\": 100,\r\n                        \"max\": 10000,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_Url}}search/v4/advanced-search",
											"host": [
												"{{base_Url}}search"
											],
											"path": [
												"v4",
												"advanced-search"
											]
										}
									},
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\"status\": {\"message\": \"Success\",\"requestId\": \"a229dd9e-3d17-45eb-87dc-f575e26047ef\",\"statusCode\": 200},\"data\": [{\"pc_con_guid\": \"A915882CB913472FCDDDC38B55E8B7A5\",\"ln_con_full_name\": \"Cassandra Martel\",\"rc_work_loc_country\": \"France\",\"ln_con_job_title_en\": \"Auxiliaire de vie/soignant\",\"leads_details\": {\"ln_con_picture_url\": \"https://media.licdn.com/dms/image/v2/D4E03AQGOahCjnQJUiA/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1720144710004?e=2147483647&v=beta&t=V8j0lE-shsrphewHCW_UopL5cdpX-vuMJyu-8CxuQKo\",\"ln_con_pub_profile_url\": \"https://www.linkedin.com/in/cassandra-martel-760726317\",\"pc_con_direct_dial_avbl\": 2,\"pc_con_email_avbl\": 2},\"accounts_filter\": {\"pc_comp_guid\": \"8BC73B7084EE4EE0\",\"rc_comp_name_drv\": \"ENFIDESIA\",\"account_details\": {\"ln_comp_logo_url\": \"https://static.licdn.com/aero-v1/sc/h/cs8pjfgyw96g44ln9r7tct85f\",\"ln_comp_pub_profile_url\": \"https://www.linkedin.com/company/enfidesia\"}}}]}"
								}
							]
						},
						{
							"name": "Advanced Search (Global Revenue Filter) - Missing Custom Range",
							"id": "37171695-67ed0a78-4bbf-4035-bd2a-c3eaa0cc6531",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"data\": {\"filterType\": \"Applied Search\",\"company_info\": {\"globalRevenue\": {}}},\"type\": \"ADVANCED_SEARCH_LEAD\",\"pagination\": {\"page_no\": 1,\"page_size\": 50}}"
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": [
								{
									"id": "37171695-9eef46bc-39c5-45bc-b34c-f2d7f75776ee",
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"data\": {\"filterType\": \"Applied Search\",\"company_info\": {\"globalRevenue\": {}}},\"type\": \"ADVANCED_SEARCH_LEAD\",\"pagination\": {\"page_no\": 1,\"page_size\": 50}}"
										},
										"url": {
											"raw": "{{base_Url}}search/v4/advanced-search",
											"host": [
												"{{base_Url}}search"
											],
											"path": [
												"v4",
												"advanced-search"
											]
										}
									},
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\"error\": \"Missing custom_range in globalRevenue\"}"
								}
							]
						},
						{
							"name": "Advanced Search (Global Revenue Filter) - Invalid Min/Max Values",
							"id": "37171695-a73f1b57-0cda-42c5-a0fc-29ed3e4995e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": -1,\r\n                        \"max\": -2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n        \"pagination\": {\r\n            \"page_no\": 1,\r\n            \"page_size\": 50\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search"
									]
								}
							},
							"response": [
								{
									"id": "37171695-4787f694-6e2e-419b-a332-aa66f2cf2b5b",
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": -1,\r\n                        \"max\": -2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n        \"pagination\": {\r\n            \"page_no\": 1,\r\n            \"page_size\": 50\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{base_Url}}search/v4/advanced-search",
											"host": [
												"{{base_Url}}search"
											],
											"path": [
												"v4",
												"advanced-search"
											]
										}
									},
									"code": 400,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\"error\": \"Invalid min or max values\"}"
								}
							]
						}
					],
					"id": "37171695-9010e434-7816-46e3-b465-598105abc997"
				},
				{
					"name": "Advanced Search Count(Global Revenue Filter)",
					"item": [
						{
							"name": "Advanced Search Count(Global Revenue Filter) - Lead",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-837eeabb-6f1c-44b8-b656-34f9b43354aa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": 1,\r\n                        \"max\": 2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_LEAD\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advanced Search Count(Global Revenue Filter) - Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-9d74ea74-c51d-43d2-99fd-7e9510c0c034",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"filterType\": \"Applied Search\",\r\n        \"company_info\": {\r\n            \"globalRevenue\": {\r\n                \"size_type\": \"CUSTOM_RANGE\",\r\n                \"custom_range\": [\r\n                    {\r\n                        \"id\": 0,\r\n                        \"name\": \"1M - 2M\",\r\n                        \"min\": 1,\r\n                        \"max\": 2,\r\n                        \"type\": \"INCLUDE\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"type\": \"ADVANCED_SEARCH_ACCOUNT\",\r\n    \"pagination\": {\r\n        \"page_no\": 1,\r\n        \"page_size\": 10\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}search/v4/advanced-search-count",
									"host": [
										"{{base_Url}}search"
									],
									"path": [
										"v4",
										"advanced-search-count"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-d156086d-f84a-4aea-a90b-7288a6286375"
				},
				{
					"name": "Save Search Lead(Global Revenue Filter)",
					"item": [
						{
							"name": "Saved Search Lead(Global Revenue Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-61e3262b-1c2f-4cf2-9ac4-c4b5d92dbf83",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Global Revenue Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-7e3cc496-26db-4cc2-9975-eb4f7f8a91dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n       \r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead(Global Revenue Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-a0ed8bb4-0ee6-4e9d-90fa-b4b7c743cb48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead ( Global Revenue Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-d073b5e9-bad5-4ecc-b421-cd88ba689a82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 116,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Global Revenue Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-cf964284-43e6-4b2a-ab28-e3e3cd6c9edc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Lead (Global Revenue Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-e2550f17-e33c-48a5-b720-1e5998e0ddd8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 116,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/contact-filter/v2/search-lead",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"contact-filter",
										"v2",
										"search-lead"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-7cc6a598-61d1-4458-9591-1b8c03ea2fb5"
				},
				{
					"name": "Save Search Account(Global Revenue Filter)",
					"item": [
						{
							"name": "Saved Search Account(Global Revenue Filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-83d84487-018b-4ef7-a938-951f972e8f0f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account (Global Revenue Filter) Missing name field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-f847749c-7456-4d1e-8d77-da3529ed6367",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n       \r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account(Global Revenue Filter) Missing Filter Json field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-3e86143e-a8e9-46ad-a6cd-b050425042a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account ( Global Revenue Filter)- Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-65081ce7-d28e-4c92-9fff-853c3cb0fb08",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 112,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account (Global Revenue Filter)- Update id missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-24ff9167-a7d7-46cc-a0ab-9fb8a9407c90",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {\r\n            \"company_info\": {\r\n                \"globalRevenue\": {\r\n                    \"size_type\": \"CUSTOM_RANGE\",\r\n                    \"custom_range\": [\r\n                        {\r\n                            \"id\": 0,\r\n                            \"name\": \"1M - 2M\",\r\n                            \"min\": 1,\r\n                            \"max\": 2,\r\n                            \"type\": \"INCLUDE\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Saved Search Account (Global Revenue Filter)- Update Json missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d8da2-2a7d-4959-8c3d-d8c22dd7ac28",
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for content type\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Test for response structure\r",
											"pm.test(\"Response has expected structure\", function () {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"data\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											"// Test for status message and status code in response\r",
											"pm.test(\"Status message and code are correct\", function () {\r",
											"    pm.expect(response.status).to.have.property(\"message\", \"Success\");\r",
											"    pm.expect(response.status).to.have.property(\"statusCode\", 200);\r",
											"});\r",
											"\r",
											"// Test for each item in data array\r",
											"// response.data.forEach(item => {\r",
											"//     pm.test(\"Data item has expected properties\", function () {\r",
											"//         pm.expect(item).to.have.property(\"pc_comp_guid\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_name_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_city_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_state_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_country_drv\");\r",
											"//         pm.expect(item).to.have.property(\"account_details\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_logo_url\");\r",
											"//         pm.expect(item.account_details).to.have.property(\"ln_comp_pub_profile_url\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_emp_range_drv\");\r",
											"//         pm.expect(item.rc_comp_emp_range_drv).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_global_rev_range\");\r",
											"//         pm.expect(item.rc_comp_global_rev_range).to.have.property(\"name\");\r",
											"//         pm.expect(item).to.have.property(\"ln_comp_url_cleaned_drv\");\r",
											"//         pm.expect(item).to.have.property(\"rc_comp_pri_ind_codes_ln_drv\");\r",
											"//         pm.expect(item.rc_comp_pri_ind_codes_ln_drv).to.have.property(\"name\").that.is.an(\"array\");\r",
											"//     });\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"id": "37171695-c09af120-cfb7-4f8d-8f10-55dbd3b17f4d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"id\": 112,\r\n        \"name\": \"adsdsdsa\",\r\n        \"filterJson\": {}\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}customer-data/v2/company-filter/v2/search-account",
									"host": [
										"{{base_Url}}customer-data"
									],
									"path": [
										"v2",
										"company-filter",
										"v2",
										"search-account"
									]
								}
							},
							"response": []
						}
					],
					"id": "37171695-d25373e2-2175-4d36-8370-4caa9f10df62"
				}
			],
			"id": "37171695-24ba0730-6e9c-40c2-b965-8c5940c18f5c"
		},
		{
			"name": "New Folder",
			"item": [],
			"id": "37171695-3cdcffdf-2d5a-49fe-adde-60e0deae01b6"
		}
	]
}